#!/bin/sh

asm_path="./fixture.s"
executable_path="./fixture"

expect_equal() {
	source_code="$1"
	expected_status="$2"
	printf "%s" "$source_code" | MallocNanoZone=0 ./ceramic > "$asm_path"
	clang -o "$executable_path" "$asm_path"
	"$executable_path"
	actual_status="$?"
	if [ "$expected_status" = "$actual_status" ]; then
		printf "PASS: %s\n" "$source_code"
	else
		printf "FAIL: %s: expected %s, got %s\n" \
			"$source_code" "$expected_status" "$actual_status"
	fi
}

cd "$(dirname "$(readlink -f "$0")")" || exit
./build || exit

expect_equal "proc main() int { return 1 + 1; }" "2"
expect_equal "
proc main() int {
	return 1 + 1
}" "2"
expect_equal "proc main() int { return 1 + 2; }" "3"
expect_equal "proc main() int { return 10 - 2; }" "8"
expect_equal "proc main() int { return 4 * 3; }" "12"
expect_equal "proc main() int { return 7 / 2; }" "3"
expect_equal "proc main() int { return 1 + 2 + 3; }" "6"
expect_equal "proc main() int { return 1 + 2 * 3; }" "7"
expect_equal "proc main() int { return 10 - 5 - 3; }" "2"
expect_equal "proc main() int { return 10 - (5 - 3); }" "8"
expect_equal "proc main() int { return ((10) - ((5 - 3))); }" "8"
expect_equal "proc main() int { return 10; return 20; }" "10"
expect_equal "
proc main() int {
	{}
	{{ return 4; return 7; }}
	{ return 2; }
}" "4"
expect_equal "proc main() int { i: int = 6; return i; }" "6"
expect_equal "
proc main() int {
	x: int = 10
	y: int = 25
	return y - x
}" "15"

rm "$asm_path" "$executable_path"
