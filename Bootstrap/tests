#!/bin/sh
# shellcheck disable=SC1111

asm_path="./fixture.s"
executable_path="./fixture"

expect_equal() {
	source_code="$1"
	expected_status="$2"
	printf "%s" "$source_code" | MallocNanoZone=0 ./ceramic "$asm_path"
	clang -o "$executable_path" "$asm_path"
	"$executable_path"
	actual_status="$?"
	if [ "$expected_status" = "$actual_status" ]; then
		printf "PASS: %s\n" "$source_code"
	else
		printf "FAIL: %s: expected %s, got %s\n" \
			"$source_code" "$expected_status" "$actual_status"
	fi
}

expect_error() {
	source_code="$1"
	expected_error="$2"
	actual_error=$(printf "%s" "$source_code" | MallocNanoZone=0 ./ceramic /dev/null)
	if [ "$expected_error" != "$actual_error" ]; then
		printf "FAIL: %s: expected <%s>, got <%s>\n" \
			"$source_code" "$expected_error" "$actual_error"
	else
		printf "PASS: %s\n" "$source_code"
	fi
}

cd "$(dirname "$(readlink -f "$0")")" || exit
./build || exit

expect_equal "proc main() int { return 1 + 1; }" "2"
expect_equal "
proc main() int {
	return 1 + 1
}" "2"
expect_equal "proc main() int { return 1 + 2; }" "3"
expect_equal "proc main() int { return 10 - 2; }" "8"
expect_equal "proc main() int { return 4 * 3; }" "12"
expect_equal "proc main() int { return 7 / 2; }" "3"
expect_equal "proc main() int { return 1 + 2 + 3; }" "6"
expect_equal "proc main() int { return 1 + 2 * 3; }" "7"
expect_equal "proc main() int { return 10 - 5 - 3; }" "2"
expect_equal "proc main() int { return 10 - (5 - 3); }" "8"
expect_equal "proc main() int { return ((10) - ((5 - 3))); }" "8"
expect_equal "proc main() int { return 10; return 20; }" "10"
expect_equal "
proc main() int {
	{}
	{{ return 4; return 7; }}
	{ return 2; }
}" "4"
expect_equal "proc main() int { i: int = 6; return i; }" "6"
expect_equal "
proc main() int {
	x: int = 10
	y: int = 25
	return y - x
}" "15"
expect_equal "
proc main() int {
	x: int = 4
	x = 3
	y: int = 1
	y = 2
	return x
}" "3"
expect_equal "
proc main() int {
	a: int = 10
	b: int = 11
	a = b
	return a
}" "11"
expect_equal "
proc main() int {
	n: int = 1
	np: *int = *n
	np^ = 9
	return n + np^
}" "18"
expect_equal "proc main() int { n: int; n = n * 5 + 3; return n; }" "3"
expect_equal "proc main() int { i := 50; return i; }" "50"
expect_equal "proc main() int { i: int; p := *i; p^ = 92; return i; }" "92"
expect_equal "proc main() int { return a(); } proc a() int { return 5; }" "5"
expect_equal "proc main() int { p(); return 2; } proc p() {}" "2"
expect_equal "proc main() int { p(); return 2; } proc p() { return; }" "2"
expect_equal "
proc main() int {
	return add(9, 2)
}
proc add(x: int, y: int) int {
	return x + y
}" "11"
expect_equal "
proc main() int {
	n := 6
	inc(*n)
	return n
}

proc inc(p: *int) {
	p^ = p^ + 1
}" "7"
expect_equal "
proc main() int {
	x := 9
	y := 2
	p := add
	result := p(x, y)
	p = mul
	result = result + p(x, y)
	return result
}

proc add(x: int, y: int) int { return x + y; }
proc mul(x: int, y: int) int { return x * y; }" "29"
expect_equal "
proc main() int {
	return apply(4, inc)
}

proc inc(x: int) int {
	return x + 1
}

proc apply(value: int, procedure: proc(int) int) int {
	return procedure(value)
}" "5"
expect_equal "
proc main() int {
	p: proc(*int)
	pp := *p
	populate(pp)
	n := 7
	pp^(*n)
	return n
}

proc populate(pp: *proc(*int)) {
	pp^ = frob
}

proc frob(n: *int) {
	n^ = n^ + 6
}" "13"
expect_equal "
proc main() int {
	n := 100
	p1: proc(*int)
	p2: proc(*int)
	p1 = inc
	p2 = p1
	p2(*n)
	return n
}
proc inc(n: *int) { n^ = n^ + 1; }
proc dec(n: *int) { n^ = n^ - 1; }" "101"

expect_error "proc main() int { return 0 }" "1: expected “;”, found “}”"
expect_error "\`" "1: invalid token “\`”"
expect_error "proc main() int { return : }" "1: expected expression"
expect_error "proc main() int { : }" "1: expected expression"
expect_error "proc main() int :" "1: expected procedure body"
expect_error ":" "1: expected procedure"
expect_error "
proc main() int {
	return foo
}" "3: unknown name “foo”"
expect_error "proc main() int { 1 = 2; }" "1: expression doesn’t have an address"
expect_error "proc main() int { x: *int = *5; }" "1: expression doesn’t have an address"
expect_error "proc main() int { x: int; x = *x; }" "1: expected “int” but found “*int”"
expect_error "proc main() int { x: int; x = x^; }" "1: can’t dereference non-pointer type “int”"
expect_error "
proc main() int {
	x: foo
}" "3: unknown type “foo”"
expect_error "
proc main() int {
	x: 5
}" "3: cannot use non-type expression as type"
expect_error "proc main() int { x: int = x; }" "1: unknown name “x”"
expect_error "
proc main() int {
	i: int
	return i + *i
}" "4: expected “int” but found “*int”"
expect_error "
proc main() int {
	p: *int
	return p
}" "4: expected “int” but found “*int”"
expect_error "
proc main() int {
	return foo()
}" "3: unknown name “foo”"
expect_error "proc main() int { x:; }" "1: expected expression"
expect_error "proc main() { return 0; }" "1: cannot return value from procedure with no return value"
expect_error "proc main() int { return; }" "1: missing return value"
expect_error "
proc main() int {
	x := p()
}
proc p() {}" "3: cannot initialize variable using expression without value"
expect_error "
proc main() int {
	p() + 1
}
proc p() {}" "3: expected “int” but found “non-value”"
expect_error "proc main() int { 1; }" "1: unused expression"
expect_error "
proc main() int { one(); }
proc one() int { return 1; }" "2: unused expression"
expect_error "proc main() int { p(1); } proc p() {}" "1: expected 0 arguments but found 1"
expect_error "
proc main() int { p(); }
proc p(x: int, y: int, z: int) {}" "2: expected 3 arguments but found 0"
expect_error "proc main() int { p(1); } proc p(x: *int) {}" "1: expected “*int” but found “int”"
expect_error "
proc main() int { p: proc() = a; }
proc a() int { return 0; }" "2: expected “proc()” but found “proc() int”"
expect_error "
proc main() int { p: proc(*int) = a; }
proc a() int { return 0; }" "2: expected “proc(*int)” but found “proc() int”"
expect_error "proc main() { p := *main; }" "1: cannot take address of procedure"
expect_error "proc main() { 1(); }" "1: cannot call value of non-procedure type “int”"

rm "$asm_path" "$executable_path"
