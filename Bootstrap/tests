#!/bin/sh
# shellcheck disable=SC1111

asm_path="./fixture.s"
executable_path="./fixture"

expect_equal() {
	source_code="$1"
	expected_status="$2"
	printf "%s" "$source_code" | MallocNanoZone=0 ./ceramic "$asm_path"
	clang -o "$executable_path" "$asm_path"
	"$executable_path"
	actual_status="$?"
	if [ "$expected_status" = "$actual_status" ]; then
		printf "PASS: %s\n" "$source_code"
	else
		printf "FAIL: %s: expected %s, got %s\n" \
			"$source_code" "$expected_status" "$actual_status"
	fi
}

expect_error() {
	source_code="$1"
	expected_error="$2"
	actual_error=$(printf "%s" "$source_code" | MallocNanoZone=0 ./ceramic /dev/null)
	if [ "$expected_error" != "$actual_error" ]; then
		printf "FAIL: %s: expected <%s>, got <%s>\n" \
			"$source_code" "$expected_error" "$actual_error"
	else
		printf "PASS: %s\n" "$source_code"
	fi
}

cd "$(dirname "$(readlink -f "$0")")" || exit
./build || exit

expect_equal "proc main() int { return 1 + 1; }" "2"
expect_equal "
proc main() int {
	return 1 + 1
}" "2"
expect_equal "proc main() int { return 1 + 2; }" "3"
expect_equal "proc main() int { return 10 - 2; }" "8"
expect_equal "proc main() int { return 4 * 3; }" "12"
expect_equal "proc main() int { return 7 / 2; }" "3"
expect_equal "proc main() int { return 1 + 2 + 3; }" "6"
expect_equal "proc main() int { return 1 + 2 * 3; }" "7"
expect_equal "proc main() int { return 10 - 5 - 3; }" "2"
expect_equal "proc main() int { return 10 - (5 - 3); }" "8"
expect_equal "proc main() int { return ((10) - ((5 - 3))); }" "8"
expect_equal "proc main() int { return 10; return 20; }" "10"
expect_equal "
proc main() int {
	{}
	{{ return 4; return 7; }}
	{ return 2; }
}" "4"
expect_equal "proc main() int { i: int = 6; return i; }" "6"
expect_equal "
proc main() int {
	x: int = 10
	y: int = 25
	return y - x
}" "15"
expect_equal "
proc main() int {
	x: int = 4
	x = 3
	y: int = 1
	y = 2
	return x
}" "3"
expect_equal "
proc main() int {
	a: int = 10
	b: int = 11
	a = b
	return a
}" "11"

expect_error "proc main() int { return 0 }" "1: expected “;”, found “}”"
expect_error "\`" "1: invalid token “\`”"
expect_error "proc main() int { return : }" "1: expected expression"
expect_error "proc main() int { : }" "1: expected expression"
expect_error "proc main() int :" "1: expected procedure body"
expect_error ":" "1: expected procedure"
expect_error "
proc main() int {
	return foo
}" "3: unknown variable “foo”"
expect_error "proc main() int { 1 = 2; }" "1: expression doesn’t have an address"

rm "$asm_path" "$executable_path"
